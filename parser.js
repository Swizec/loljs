/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"body":4,"eol":5,"NEWLINE":6,"COMMA":7,"EOF":8,"arg_end":9,"MKAY":10,"arg_list":11,"simple_exp":12,"SEP":13,"function_call":14,"IDENTIFIER":15,"function_def_arg_list":16,"YR":17,"function_def":18,"HOW_DUZ_I":19,"IF_U_SAY_SO":20,"loop_operation":21,"UPPIN":22,"NERFIN":23,"loop_condition":24,"TIL":25,"WILE":26,"loop":27,"IM_IN_YR":28,"KTHX":29,"IM_OUTTA_YR":30,"type":31,"TYPE":32,"NOOB":33,"BIN_OP":34,"P_BIN_OP":35,"NOT":36,"NUMBER":37,"YARN":38,"TROOF":39,"(":40,")":41,"CAST_MAEK":42,"A":43,"var_dec":44,"VAR_DEC":45,"ITS":46,"conditional_inner":47,"O_RLY":48,"YA_RLY":49,"MEBBE":50,"NO_WAI":51,"conditional":52,"OIC":53,"line":54,"assignment":55,"R":56,"O_NVM":57,"GTFO":58,"FOUND_YR":59,"VISIBLE":60,"GIMMEH":61,"CAST_IS_NOW":62,"HALP":63,"$accept":0,"$end":1},
terminals_: {2:"error",6:"NEWLINE",7:"COMMA",8:"EOF",10:"MKAY",13:"SEP",15:"IDENTIFIER",17:"YR",19:"HOW_DUZ_I",20:"IF_U_SAY_SO",22:"UPPIN",23:"NERFIN",25:"TIL",26:"WILE",28:"IM_IN_YR",29:"KTHX",30:"IM_OUTTA_YR",32:"TYPE",33:"NOOB",34:"BIN_OP",35:"P_BIN_OP",36:"NOT",37:"NUMBER",38:"YARN",39:"TROOF",40:"(",41:")",42:"CAST_MAEK",43:"A",45:"VAR_DEC",46:"ITS",48:"O_RLY",49:"YA_RLY",50:"MEBBE",51:"NO_WAI",53:"OIC",56:"R",57:"O_NVM",58:"GTFO",59:"FOUND_YR",60:"VISIBLE",61:"GIMMEH",62:"CAST_IS_NOW",63:"HALP"},
productions_: [0,[3,1],[3,2],[5,1],[5,1],[5,1],[9,1],[9,1],[11,1],[11,3],[14,3],[16,2],[16,4],[16,0],[18,6],[21,3],[21,3],[24,2],[24,2],[27,5],[27,8],[31,1],[31,1],[12,3],[12,4],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,3],[12,4],[44,4],[44,2],[47,5],[47,5],[47,4],[52,2],[4,1],[4,2],[4,3],[55,3],[54,1],[54,1],[54,1],[54,1],[54,1],[54,2],[54,1],[54,2],[54,2],[54,3],[54,1],[54,1],[54,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0]; 
break;
case 2: return $$[$0-1] 
break;
case 3: this.$ = $$[$0] 
break;
case 4: this.$ = $$[$0] 
break;
case 5: this.$ = $$[$0] 
break;
case 6:this.$ = $$[$0];
break;
case 8: this.$ = new ast.ArgList(this._$, [$$[$0]]); 
break;
case 9:
            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 10: this.$ = new ast.FunctionCall(this._$, $$[$0-2], $$[$0-1]); 
break;
case 11: this.$ = [$$[$0]]; 
break;
case 12: $$[$0-3].push($$[$0]); this.$ = $$[$0-3]; 
break;
case 13:this.$ = []; 
break;
case 14: this.$ = new ast.FunctionDefinition(this._$, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 15: this.$ = new ast.LoopOperation(this._$, 'inc', $$[$0]) 
break;
case 16: this.$ = new ast.LoopOperation(this._$, 'dec', $$[$01]); 
break;
case 17: this.$ = new ast.LoopCondition(this._$, 'until', $$[$0]); 
break;
case 18: this.$ = new ast.LoopCondition(this._$, 'while', $$[$0]); 
break;
case 19: this.$ = new ast.Loop(this._$, $$[$0-1]) 
break;
case 20:
            this.$ = new ast.Loop(this._$, $$[$0-2], $$[$0-5], $$[$0-4]);
        
break;
case 21:this.$ = $$[$0]; 
break;
case 22:this.$ = $$[$0]; 
break;
case 23:
            var args = new ast.ArgList(this._$, [$$[$0-2], $$[$0]]);
            this.$ = new ast.FunctionCall(this._$, $$[$0-1], args);
        
break;
case 24:
            var args = new ast.ArgList(this._$, [$$[$0-2], $$[$0]]);
            this.$ = new ast.FunctionCall(this._$, $$[$0-3], args);
        
break;
case 25:
            var args =  new ast.ArgList(this._$, [$$[$0]]);
            this.$ = new ast.FunctionCall(this._$, 'NOT', args);
        
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = new ast.Literal(this._$, Number($$[$0])); 
break;
case 28:  this.$ = new ast.Literal(this._$, $$[$0]);  
break;
case 29: this.$ = new ast.Literal(this._$, $$[$0].toLowerCase() === 'win');
break;
case 30: this.$ = new ast.Literal(this._$, null); 
break;
case 31: this.$ = new ast.Identifier(this._$, $$[$0]); 
break;
case 32: this.$ = $$[$0-1] 
break;
case 33: this.$ = new ast.Cast(this._$, $$[$0-2], $$[$0]); 
break;
case 34: this.$ = new ast.Declaration(this._$, $$[$0-2], $$[$0]) 
break;
case 35: this.$ = new ast.Declaration(this._$, $$[$0]) 
break;
case 36: this.$ = new ast.If(this._$, $$[$0]); 
break;
case 37:
            var elseIf = new ast.If(this._$, $$[$0]);
            elseIf.condition = $$[$0-2];
            $$[$0-4].elseIfs.push(elseIf);
            this.$ = $$[$0-4];
        
break;
case 38: $$[$0-3].elseBody = $$[$0]; this.$ = $$[$0-3]; 
break;
case 39: this.$ = $$[$0-1]; 
break;
case 40:this.$ = new ast.Body(this._$);
break;
case 41:
            this.$ = new ast.Body(this._$);
            this.$.push($$[$0-1]);
        
break;
case 42:
            $$[$0-2].push($$[$0-1]);
            this.$ = $$[$0-2];
        
break;
case 43: this.$ = new ast.Assignment(this._$, $$[$0-2], $$[$0]); 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = new ast.NoOp(this._$); 
break;
case 48: this.$ = new ast.Break(this._$); 
break;
case 49: this.$ = new ast.Return(this._$, $$[$0]); 
break;
case 50:this.$ = $$[$0]; 
break;
case 51: this.$ = new ast.Visible(this._$, $$[$0]); 
break;
case 52: this.$ = new ast.Gimmeh(this._$, $$[$0]); 
break;
case 53:
            var ident = new ast.Identifier(this._$, $$[$0-2]);
            var cast = this.$ = new ast.Cast(this._$, ident, $$[$0]);
            var assignment = new ast.Assignment(this._$, $$[$0-2], cast);
            this.$ = assignment;
        
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = new ast.Breakpoint(this._$); 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{1:[3],5:35,6:[1,5],7:[1,6],8:[1,7]},{1:[2,1],6:[2,1],7:[2,1],8:[2,1],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{1:[2,40],6:[2,40],7:[2,40],8:[2,40],15:[2,40],19:[2,40],20:[2,40],28:[2,40],29:[2,40],30:[2,40],33:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],42:[2,40],45:[2,40],48:[2,40],50:[2,40],51:[2,40],53:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40],61:[2,40],63:[2,40]},{5:37,6:[1,5],7:[1,6],8:[1,7]},{1:[2,3],6:[2,3],7:[2,3],8:[2,3],10:[2,3],13:[2,3],15:[2,3],19:[2,3],20:[2,3],28:[2,3],29:[2,3],30:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],41:[2,3],42:[2,3],43:[2,3],45:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],53:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3],61:[2,3],63:[2,3]},{1:[2,4],6:[2,4],7:[2,4],8:[2,4],10:[2,4],13:[2,4],15:[2,4],19:[2,4],20:[2,4],28:[2,4],29:[2,4],30:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],45:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],53:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4],61:[2,4],63:[2,4]},{1:[2,5],6:[2,5],7:[2,5],8:[2,5],10:[2,5],13:[2,5],15:[2,5],19:[2,5],20:[2,5],28:[2,5],29:[2,5],30:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],45:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],53:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5],61:[2,5],63:[2,5]},{6:[2,44],7:[2,44],8:[2,44]},{6:[2,45],7:[2,45],8:[2,45],34:[1,38]},{6:[2,46],7:[2,46],8:[2,46]},{6:[2,47],7:[2,47],8:[2,47]},{6:[2,48],7:[2,48],8:[2,48]},{12:39,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{6:[2,50],7:[2,50],8:[2,50]},{12:41,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{15:[1,42]},{6:[2,31],7:[2,31],8:[2,31],11:45,12:46,14:24,15:[1,40],33:[1,28],34:[2,31],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],56:[1,44],62:[1,43]},{6:[2,54],7:[2,54],8:[2,54]},{6:[2,55],7:[2,55],8:[2,55]},{6:[2,56],7:[2,56],8:[2,56]},{15:[1,47]},{12:48,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{12:49,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{6:[2,26],7:[2,26],8:[2,26],10:[2,26],13:[2,26],34:[2,26],41:[2,26],43:[2,26]},{6:[2,27],7:[2,27],8:[2,27],10:[2,27],13:[2,27],34:[2,27],41:[2,27],43:[2,27]},{6:[2,28],7:[2,28],8:[2,28],10:[2,28],13:[2,28],34:[2,28],41:[2,28],43:[2,28]},{6:[2,29],7:[2,29],8:[2,29],10:[2,29],13:[2,29],34:[2,29],41:[2,29],43:[2,29]},{6:[2,30],7:[2,30],8:[2,30],10:[2,30],13:[2,30],34:[2,30],41:[2,30],43:[2,30]},{12:50,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{12:51,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{15:[1,52]},{50:[1,54],51:[1,55],53:[1,53]},{15:[1,56]},{5:57,6:[1,5],7:[1,6],8:[1,7]},{1:[2,2],6:[2,2],7:[2,2],8:[2,2]},{5:58,6:[1,5],7:[1,6],8:[1,7]},{1:[2,41],6:[2,41],7:[2,41],8:[2,41],15:[2,41],19:[2,41],20:[2,41],28:[2,41],29:[2,41],30:[2,41],33:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],42:[2,41],45:[2,41],48:[2,41],50:[2,41],51:[2,41],53:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],63:[2,41]},{12:59,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{6:[2,49],7:[2,49],8:[2,49],34:[1,38]},{6:[2,31],7:[2,31],8:[2,31],10:[2,31],11:45,12:46,13:[2,31],14:24,15:[1,40],33:[1,28],34:[2,31],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],41:[2,31],42:[1,30],43:[2,31]},{6:[2,51],7:[2,51],8:[2,51],34:[1,38]},{6:[2,52],7:[2,52],8:[2,52]},{31:60,32:[1,61],33:[1,62]},{12:63,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{5:67,6:[1,5],7:[1,6],8:[1,7],9:64,10:[1,66],13:[1,65]},{6:[2,8],7:[2,8],8:[2,8],10:[2,8],13:[2,8],34:[1,38]},{6:[2,35],7:[2,35],8:[2,35],46:[1,68]},{13:[1,69],34:[1,38]},{6:[2,25],7:[2,25],8:[2,25],10:[2,25],13:[2,25],34:[1,38],41:[2,25],43:[2,25]},{34:[1,38],41:[1,70]},{34:[1,38],43:[1,71]},{5:72,6:[1,5],7:[1,6],8:[1,7],21:73,22:[1,74],23:[1,75]},{6:[2,39],7:[2,39],8:[2,39]},{12:76,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{5:77,6:[1,5],7:[1,6],8:[1,7]},{6:[2,13],7:[2,13],8:[2,13],13:[2,13],16:78,17:[1,79]},{49:[1,80]},{1:[2,42],6:[2,42],7:[2,42],8:[2,42],15:[2,42],19:[2,42],20:[2,42],28:[2,42],29:[2,42],30:[2,42],33:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],42:[2,42],45:[2,42],48:[2,42],50:[2,42],51:[2,42],53:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],61:[2,42],63:[2,42]},{6:[2,23],7:[2,23],8:[2,23],10:[2,23],13:[2,23],34:[2,23],41:[2,23],43:[2,23]},{6:[2,53],7:[2,53],8:[2,53]},{6:[2,21],7:[2,21],8:[2,21],10:[2,21],13:[2,21],34:[2,21],41:[2,21],43:[2,21]},{6:[2,22],7:[2,22],8:[2,22],10:[2,22],13:[2,22],34:[2,22],41:[2,22],43:[2,22]},{6:[2,43],7:[2,43],8:[2,43],34:[1,38]},{6:[2,10],7:[2,10],8:[2,10],10:[2,10],13:[2,10],34:[2,10],41:[2,10],43:[2,10]},{12:81,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{6:[2,6],7:[2,6],8:[2,6],10:[2,6],13:[2,6],34:[2,6],41:[2,6],43:[2,6]},{6:[2,7],7:[2,7],8:[2,7],10:[2,7],13:[2,7],34:[2,7],41:[2,7],43:[2,7]},{12:82,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{12:83,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{6:[2,32],7:[2,32],8:[2,32],10:[2,32],13:[2,32],34:[2,32],41:[2,32],43:[2,32]},{31:84,32:[1,61],33:[1,62]},{4:85,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{24:86,25:[1,87],26:[1,88]},{17:[1,89]},{17:[1,90]},{5:91,6:[1,5],7:[1,6],8:[1,7],34:[1,38]},{4:92,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{5:93,6:[1,5],7:[1,6],8:[1,7],13:[1,94]},{15:[1,95]},{5:96,6:[1,5],7:[1,6],8:[1,7]},{6:[2,9],7:[2,9],8:[2,9],10:[2,9],13:[2,9],34:[1,38]},{6:[2,34],7:[2,34],8:[2,34],34:[1,38]},{6:[2,24],7:[2,24],8:[2,24],10:[2,24],13:[2,24],34:[2,24],41:[2,24],43:[2,24]},{6:[2,33],7:[2,33],8:[2,33],10:[2,33],13:[2,33],34:[2,33],41:[2,33],43:[2,33]},{12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],29:[1,97],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{5:98,6:[1,5],7:[1,6],8:[1,7]},{12:99,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{12:100,14:24,15:[1,40],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30]},{15:[1,101]},{15:[1,102]},{4:103,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],50:[2,38],51:[2,38],52:18,53:[2,38],54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{4:104,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{17:[1,105]},{6:[2,11],7:[2,11],8:[2,11],13:[2,11]},{4:106,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{6:[2,19],7:[2,19],8:[2,19]},{4:107,5:3,6:[1,5],7:[1,6],8:[1,7],12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:4,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{6:[2,17],7:[2,17],8:[2,17],34:[1,38]},{6:[2,18],7:[2,18],8:[2,18],34:[1,38]},{25:[2,15],26:[2,15]},{25:[2,16],26:[2,16]},{12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],50:[2,37],51:[2,37],52:18,53:[2,37],54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{12:9,14:24,15:[1,17],18:19,19:[1,33],20:[1,108],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{15:[1,109]},{12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],50:[2,36],51:[2,36],52:18,53:[2,36],54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{12:9,14:24,15:[1,17],18:19,19:[1,33],27:10,28:[1,31],30:[1,110],33:[1,28],35:[1,22],36:[1,23],37:[1,25],38:[1,26],39:[1,27],40:[1,29],42:[1,30],44:8,45:[1,21],47:32,48:[1,34],52:18,54:36,55:14,57:[1,11],58:[1,12],59:[1,13],60:[1,15],61:[1,16],63:[1,20]},{6:[2,14],7:[2,14],8:[2,14]},{6:[2,12],7:[2,12],8:[2,12],13:[2,12]},{15:[1,111]},{6:[2,20],7:[2,20],8:[2,20]}],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip block comment */
break;
case 1:/* skip comment */
break;
case 2:return "NEWLINE"
break;
case 3:return "COMMA"
break;
case 4:/* skip whitespace */
break;
case 5:return "NUMBER"
break;
case 6:return "YARN"
break;
case 7:return "YARN"
break;
case 8:return "TROOF"
break;
case 9:return "TROOF"
break;
case 10:return "NOOB"
break;
case 11:/* skip */
break;
case 12:/* skip */
break;
case 13:return "KTHX"
break;
case 14:return "ITS"
break;
case 15:return "VAR_DEC"
break;
case 16:return "BIN_OP"
break;
case 17:return "BIN_OP"
break;
case 18:return "P_BIN_OP"
break;
case 19:return "P_BIN_OP"
break;
case 20:return "P_BIN_OP"
break;
case 21:return "P_BIN_OP"
break;
case 22:return "P_BIN_OP"
break;
case 23:return "P_BIN_OP"
break;
case 24:return "P_BIN_OP"
break;
case 25:return "P_BIN_OP"
break;
case 26:return "P_BIN_OP"
break;
case 27:return "P_BIN_OP"
break;
case 28:return "P_BIN_OP"
break;
case 29:return "P_BIN_OP"
break;
case 30:return "NOT"
break;
case 31:return "IDENTIFIER"
break;
case 32:return "IDENTIFIER"
break;
case 33:return "SEP"
break;
case 34:return "MKAY"
break;
case 35:return "R"
break;
case 36:return "O_RLY"
break;
case 37:return "YA_RLY"
break;
case 38:return "MEBBE"
break;
case 39:return "OIC"
break;
case 40:return "NO_WAI"
break;
case 41:return "HOW_DUZ_I"
break;
case 42:return "FOUND_YR"
break;
case 43:return "YR"
break;
case 44:return "IF_U_SAY_SO"
break;
case 45:return "IM_IN_YR"
break;
case 46:return "IM_OUTTA_YR"
break;
case 47:return "O_NVM"
break;
case 48:return "UPPIN"
break;
case 49:return "NERFIN"
break;
case 50:return "VISIBLE"
break;
case 51:return "GIMMEH"
break;
case 52:return "TIL"
break;
case 53:return "WILE"
break;
case 54:return "GTFO"
break;
case 55:return "TYPE"
break;
case 56:return "TYPE"
break;
case 57:return "TYPE"
break;
case 58:return "TYPE"
break;
case 59:return "TYPE"
break;
case 60:return "TYPE"
break;
case 61:return "CAST_MAEK"
break;
case 62:return "CAST_IS_NOW"
break;
case 63:return "A"
break;
case 64:return "HALP"
break;
case 65:return "IDENTIFIER"
break;
case 66:return "("
break;
case 67:return ")"
break;
case 68:/* skip */
break;
case 69:return "EOF"
break;
case 70:return "INVALID"
break;
}
},
rules: [/^(?:OBTW[\s\S]+TLDR\b)/i,/^(?:BTW.*)/i,/^(?:(\r?\n)+\s*)/i,/^(?:,)/i,/^(?:[^\S\r\n]+)/i,/^(?:-?[0-9]+(\.[0-9]+)?\b)/i,/^(?:"([^\":]+|:.)*")/i,/^(?:'([^\']*)')/i,/^(?:WIN\b)/i,/^(?:FAIL\b)/i,/^(?:NOOB\b)/i,/^(?:HAI\s*)/i,/^(?:KTHXBYE\s*)/i,/^(?:KTHX\b)/i,/^(?:IT[SZ])/i,/^(?:I\s+HAS\s+A\b)/i,/^(?:BIGG?R\s+THAN\b)/i,/^(?:SMALL?R\s+THAN\b)/i,/^(?:SUM\s+OF\b)/i,/^(?:DIFF\s+OF\b)/i,/^(?:PRODUKT\s+OF\b)/i,/^(?:QUOSHUNT\s+OF\b)/i,/^(?:MOD\s+OF\b)/i,/^(?:BIGGR\s+OF\b)/i,/^(?:SMALLR\s+OF\b)/i,/^(?:BOTH\s+SAEM\b)/i,/^(?:DIFFRINT\b)/i,/^(?:BOTH\s+OF\b)/i,/^(?:EITHER\s+OF\b)/i,/^(?:WON\s+OF\b)/i,/^(?:NOT\b)/i,/^(?:ALL\s+OF\b)/i,/^(?:ANY\s+OF\b)/i,/^(?:AN\b)/i,/^(?:MKAY\b)/i,/^(?:R\b)/i,/^(?:O\s+RLY\s*\?)/i,/^(?:YA\s+RLY\b)/i,/^(?:MEBBE\b)/i,/^(?:OIC\b)/i,/^(?:NO\s+WAI\b)/i,/^(?:HOW\s+DUZ\s+I\b)/i,/^(?:FOUND\s+YR\b)/i,/^(?:YR\b)/i,/^(?:IF\s+U\s+SAY\s+SO\b)/i,/^(?:IM\s+IN\s+YR\b)/i,/^(?:IM\s+OUTTA\s+YR\b)/i,/^(?:O\s+NVM\b)/i,/^(?:UPPIN\b)/i,/^(?:NERFIN\b)/i,/^(?:VISIBLE\b)/i,/^(?:G[IE]MMEH\b)/i,/^(?:TIL\b)/i,/^(?:WILE\b)/i,/^(?:GTFO\b)/i,/^(?:NUMBR\b)/i,/^(?:NUMBAR\b)/i,/^(?:TROOF\b)/i,/^(?:YARN\b)/i,/^(?:NOOB\b)/i,/^(?:BUKKIT\b)/i,/^(?:MAEK\b)/i,/^(?:IS\s+NOW\s+A\b)/i,/^(?:A\b)/i,/^(?:PLZ HALP\b)/i,/^(?:[a-zA-Z_]+[a-zA-Z_0-9]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}